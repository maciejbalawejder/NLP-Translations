# -*- coding: utf-8 -*-
"""training_loop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C83dl-RUF9zXDKVZuaW66J_GdFKRpILi
"""

import torch
import torch.nn as nn
from utils import load_checkpoint, save_checkpoint, i2w, datasetGenerator
from model import Model
from seq2seq import Seq2Seq, Encoder, Decoder
from tqdm.notebook import tqdm_notebook
import matplotlib.pyplot as plt
#from google.colab import drive => uncomment for colab
#drive.mount('/content/drive')

BATCH = 64
LEARNING_RATE = 0.001
LAYERS = 1
HIDDEN_DIM = 1024
EPOCHS = 20
EMBEDDING_DIM = 300
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")
P = 0.5

# DATASET
(train_iterator, validation_iterator, test_iterator), (train_data, validation_data, test_data), (english, german) = datasetGenerator(BATCH, DEVICE)

# MODEL
ENCODER = Encoder(input_size=len(german.vocab), embedding_size=EMBEDDING_DIM, 
                  hidden_size=HIDDEN_DIM, layers=LAYERS, p=P).to(DEVICE)

DECODER = Decoder(input_size=len(english.vocab), output_size=len(english.vocab), 
                  embedding_size=EMBEDDING_DIM, hidden_size=HIDDEN_DIM,
                  layers=LAYERS, p=0).to(DEVICE)

SEQ2SEQ = Seq2Seq(ENCODER, DECODER).to(DEVICE)
MODEL = Model(model=SEQ2SEQ, lr=LEARNING_RATE, vocab=english, device=DEVICE)
lambda2 = lambda epoch: round(0.7 ** epoch,7)
STEPLR = torch.optim.lr_scheduler.LambdaLR(MODEL.opt, lr_lambda=lambda2)

# TRAINING LOOP
force_ratio = 0.5
train_loss, train_bleu = [], []
val_loss, val_bleu = [0], [] # added zero at the start to avoid error with max
lr = []
for epoch in tqdm_notebook(range(1, EPOCHS+1), desc = 'Epoch'):
    tl, _ = MODEL.train_step(train_iterator, force_ratio)
    vl, vb = MODEL.validation_step(validation_iterator)

    if vl > val_loss[-1]:
        print("Overfitting...")
        break

    if vl < min(val_loss):
        save_checkpoint(MODEL.checkpoint, 'drive/MyDrive/attentionv1')
        
    if epoch&2 == 0 : 
        STEPLR.step()
        force_ratio = round(force_ratio*0.5,5)
        

    train_loss.append(tl)
    val_loss.append(vl)
    val_bleu.append(vb)
    lr.append(STEPLR.get_lr())
    
    print(f'Delta loss: {vl-tl}')
    print(f'Bleu score: {vb}')
    
    
MODEL.test_step(test_iterator)

plt.figure(dpi=200)
plt.grid()
plt.plot(train_loss, label='Training')
plt.plot(val_loss, label='Validation')
plt.savefig('drive/MyDrive/loss.png')

plt.figure(dpi=200)
plt.grid()
plt.plot(train_bleu, label='Training')
plt.plot(val_bleu, label='Validation')
plt.savefig('drive/MyDrive/bleu.png')
