# -*- coding: utf-8 -*-
"""seq2seq

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FH4QNBk53BzEeAYIoFcVPbh73hem5s_J
"""

import torch
import random
from torch import nn


# Encoder : Input (32,128) => Embedding (32, 128, 256) => LSTM (32, 128, 512) [x]
# Decoder : Input (1,128) => LSTM (33, 128, 256) => Embedding (33, 128, 512) []

class Encoder(nn.Module):
    def __init__(self, input_size, embedding_size, hidden_size, layers, p, bidirectional=False):
        super(Encoder, self).__init__() 
        # Input size is source language vocabulary size       
        self.embedding = nn.Embedding(input_size, embedding_size)
        self.RNN = nn.LSTM(input_size=embedding_size, hidden_size=hidden_size, 
                           num_layers=layers, dropout=p, 
                           bidirectional=bidirectional)
        self.dropout = nn.Dropout(p=p)
        self.bidirectional = bidirectional

    def forward(self,x):
        x = self.dropout(self.embedding(x))
        outputs, (hidden, cell) = self.RNN(x)
        return hidden, cell


class Decoder(nn.Module):
    def __init__(self, input_size, output_size, embedding_size, hidden_size, layers, p, bidirectional=False):
        super(Decoder, self).__init__()        
        # Output size is target language vocabulary size
        self.RNN = nn.LSTM(input_size=embedding_size, hidden_size=hidden_size, 
                           num_layers=layers, dropout=p, 
                           bidirectional=bidirectional)
        self.embedding = nn.Embedding(input_size, embedding_size) 
        self.dense = nn.Linear(hidden_size, output_size)
        self.dropout = nn.Dropout(p=p)
        self.output_size = output_size

    def forward(self, x, state):
        x = x.unsqueeze(0)
        x = self.dropout(self.embedding(x))
        outputs, (hidden, cell) = self.RNN(x, state)
        pred = self.dense(outputs)
        pred = pred.squeeze(0)
        return pred, (hidden, cell)

class Seq2Seq(nn.Module):
    def __init__(self, encoder, decoder):
        super(Seq2Seq, self).__init__()
        self.encoder = encoder
        self.decoder = decoder

    def forward(self, source, target, force_ratio, flip=False):
        target_len, batch = target.shape
        outputs = torch.zeros(target_len, batch, self.decoder.output_size)

        hidden, cell = self.encoder(source)

        x = target[0]

        for t in range(1,target_len):
            output, (hidden, cell) = self.decoder(x, (hidden, cell))
            outputs[t] = output.unsqueeze(0)
            
            pred = output.argmax(1)

            if random.random() > force_ratio:
                x = pred
            else:
                x = target[t]

        return outputs
